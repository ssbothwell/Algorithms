#!/usr/bin/env python
from random import randint
import copy

def generateEdges(graph):
    edges = []
    for node in graph:
        for neighbor in graph[node]:
            edges.append([node, neighbor])

    return edges


def contractEdge(edgeSet, edge, graph):
    for e in edgeSet:
        if edge[1] in e:
            e[e.index(edge[1])] = edge[0]
        if e[0] == e[1]:
            edgeSet.remove(e)
    return edgeSet, updateGraph(edgeSet)


def updateGraph(edgeSet):
    graph = {}
    for edge in edgeSet:
        if edge[0] not in graph:
            graph[edge[0]] = [ edge[1] ]
        else:
            graph[edge[0]].append(edge[1])
    return graph


def cleanGraph(g):
    graph = copy.deepcopy(g)
    for v in g:
        for n in graph[v]:
            if n == v:
                graph[v].remove(n)
    return graph


def pick(g):
    v = random.sample(g.keys(),1)[0]
    e = random.sample(g[v],1)[0]
    return v,e


def checkMin(g):
    if len(g) == 2:
        for v in g:
            g[v] = filter(lambda x: x != v, g[v])
        return g
    elif len(g) > 2:
        edges = generateEdges(g)
        rEdge = edges[randint(0,len(edges)-1)]
        edges, g = contractEdge(edges, rEdge, g)
        return checkMin(g)


file = open('karger2.txt', 'r')
raw_data = [ [ int(el) for el in line.strip().split(" ") ] for line in file ] 

graph = { line[0]: [line[i] for i in range(1,len(line))] for line in raw_data }

print graph
